// This file is generated by kconfig_compiler_kf5 from bmicalcconfig.kcfg.
// All changes you do to this file will be lost.

#include "bmicalcconfig.h"

#include <qglobal.h>
#include <QFile>

class bmicalcConfigHelper
{
  public:
    bmicalcConfigHelper() : q(nullptr) {}
    ~bmicalcConfigHelper() { delete q; q = nullptr; }
    bmicalcConfigHelper(const bmicalcConfigHelper&) = delete;
    bmicalcConfigHelper& operator=(const bmicalcConfigHelper&) = delete;
    bmicalcConfig *q;
};
Q_GLOBAL_STATIC(bmicalcConfigHelper, s_globalbmicalcConfig)
bmicalcConfig *bmicalcConfig::self()
{
  if (!s_globalbmicalcConfig()->q) {
    new bmicalcConfig;
    s_globalbmicalcConfig()->q->read();
  }

  return s_globalbmicalcConfig()->q;
}

bmicalcConfig::bmicalcConfig( QObject *parent )
  : KConfigSkeleton()
{
  setParent(parent);
  Q_ASSERT(!s_globalbmicalcConfig()->q);
  s_globalbmicalcConfig()->q = this;
  KConfigCompilerSignallingItem::NotifyFunction notifyFunction = static_cast<KConfigCompilerSignallingItem::NotifyFunction>(&bmicalcConfig::itemChanged);

  setCurrentGroup( QStringLiteral( "General" ) );

  KConfigCompilerSignallingItem  *itemSomeSetting;
  KConfigSkeleton::ItemBool  *innerItemSomeSetting;
  innerItemSomeSetting = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "someSetting" ), mSomeSetting, true );
  itemSomeSetting = new KConfigCompilerSignallingItem(innerItemSomeSetting, this, notifyFunction, signalSomeSettingChanged);
  addItem( itemSomeSetting, QStringLiteral( "someSetting" ) );
}

bool bmicalcConfig::defaultSomeSettingValue_helper()
{

  return true;
}

bmicalcConfig::~bmicalcConfig()
{
  if (s_globalbmicalcConfig.exists() && !s_globalbmicalcConfig.isDestroyed()) {
    s_globalbmicalcConfig()->q = nullptr;
  }
}


void bmicalcConfig::itemChanged(quint64 signalFlag) {

  switch (signalFlag) {
  case signalSomeSettingChanged:
    Q_EMIT someSettingChanged();
    break;
  }
}

#include "bmicalcconfig.moc"

